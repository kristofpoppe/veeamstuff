
discussing replication failover
perform a replication failover
because the steps are simply laid out
and easy to follow
but the logic behind those steps can
sometimes be challenging for people to
understand
chart
to help you better understand how this
process works
and really better understand what can
happen
take a look at the demonstration
failover as it pertains to veeam
cover the logical
of this instead of getting into a lot of
the details
of say the delta files or snapshots
because
knowing the logic is really going to
help you build a strong foundation
to be able to answer a lot of other
questions so
where the original virtual machine
resides
dr is where the replica is going to
reside or where we replicated a copy of
that virtual machine
now for this discussion this replica is
going to be
off-site okay so a true dr not
something that could be on-prem and
start here
by identifying prod now from here
we have had an event where we have
realized that we need to fail over to
our dr site
that we can use
cover
generally failover so at this point what
we have done
is we have failed over to the dr site
now with this failover process
we are now running over on this dr site
and the original has been shut down the
next
option that we have which is very
important to understand and think about
is if prod in most cases is no longer
available is
whatever it is
possible decision and that first
decision
would be a permanent
important to define this
is because once you do a permanent
failover
you have broken the replication for that
job for that virtual machine
because again in the name it says
permanent we want it to stay
over here at the dr site once that is
discussed some people might look at this
and say well wait a minute what if i
want to fail back to production
well the second decision is if you still
had
prod as an option we do have the
fail back now what this does
is allows us to fail back here
running the arrow up this way to show
bring some of the data that was
collected
while we were at the dr site and start
bringing it back into the production
level
production and
have that content that was collected at
the dr level come with us
then we can do something called
commit fail back
and what that does is now says we are
now running
on production replication is still there
and we continue on and this now will
become the last known good
any changes that happened
during that failover period now
situation
so at 12 a.m we did
so we synchronized at 12 a.m a replica
down to the dr
site now listen carefully in this
example
some people might do them every hour so
that these are 24-hour replica jobs okay
so while this is in this state
after the replica that original machine
is still
and at six am
we see that there is a failure
okay well if there is a failure
it failed it could have been at five or
four
but there was still content being
written up to this point
but this content was not copied down to
the replica
consider so
at this point we have a meeting and
decide at 7 00 a.m
that we are going to fail over
and from this point forward we are
writing data down here
to the replica okay
now this concept is really important
because
there are going to be two situations
to lose
data but you chose to lose that data so
the first one
is if i say that i just want to do a
permanent failover
well remember when i failed over i
launched
that replica from this point and i did
it at 7 00 am
and if i say i want to permanently fail
over
this information is not included now
that could be because i had malware
caused the failure i could have
failure
here so when i permanently failed over
i left that bad data behind that was
written
have data
lost because the data you lost was maybe
okay now with all of this in place
there are two more features that we have
to discuss but they can create
a bit of confusion and i want to make
sure that we truly understand
as we go back to these processes all
right
but the next one is fail back now
this is where we have a little bit of a
difference so when we say
fail back now
say
bringing it back up here
and trying to do our best to combine
those two
into the most current data that we can
have the only loss would probably be
between when this failure happened and
when you started the failover so once
again a fail back and commit fail back
will include this and this data to
create the most
current and most complete
compiling of information between those
two time frames
now there is another feature or two
features i should say that are undo
features
and this is why i wait to the end to
discuss this because if you bring these
in too early
it can create confusion undo failovers
to me
looked at them as safety nets
is
undo failover okay
now when we talk about undo failover
to fail over anymore okay so i failed
over
but i want to go back to prod and what
undo failover really says
care about this data
so an undo failover means throw this
away go back here because there might be
want to lose
remember if i permanently failed over i
would lose that
so if i fail over and i need this more
than this i can say undo failover and
that could all just be testing data
throws it away
but again that could be considered to
some people data loss
you chose to lose that data when you say
undo failover okay the other one
is undo fail back and this one is a
little more odd
moment so undo failback means
going back to failover from fail back
now the reason why this can become a bit
confusing and i actually titled a data
confusion
is because i have a snapshot now running
here
and a snapshot running here and i say
you know what i want to back out
of this fail back now i want to go back
this way
and i want to undo that process
well now we create yet another snapshot
down here
understand where this data resides
it can
create data confusion so
these are components that are going to
be necessary for certain situations
going to be
probably the best value if you will
happen in each stage
so i tell people all the time stay
within
the first lines that we talked about
these again can be considered safety
nets
but at the same time undo failover could
be something that we just make sure
care about this undo failback somebody
failed over
failed back and before they committed
wanted to go back to failover
and and just wanted to stay within that
cycle again
truly explaining how these pieces of
data are positioned
can be kind of complicated to some
want to
product that works as well
so i hope this helped you better
understand
the process i know when you look at it
you know convoluted and confusing but if
you watch from the beginning
and you see this all lay out in front of
you have to do is
follow these arrows and again starting
from the root which is in blue
all your decisions are based from the
root or go back to the root
thank you for your time
